/* ==================================================
  ** _mixins.scss

================================================== */

/* ==================================================
  ** Visually Hidden mixin
  Usage: `@include visually-hidden()`

  Hides content from view, but allows text to stay visible to screen readers
  arguments: n/a
================================================== */

@mixin visually-hidden {
  position: absolute;
  overflow: hidden;
  clip: rect(0 0 0 0);
  clip-path: polygon(0 0, 0 0, 0 0);
  width: 1px;
  height: 1px;
  margin: -1px;
  padding: 0;
  white-space: nowrap;
  border: 0;
}


/* ==================================================
** Button reset mixin
  Usage: `@include button-style-reset();

  Resets base button style
  arguments: n/a
================================================== */

@mixin button-style-reset {
  padding: 0;
  appearance: none;
  font-family: inherit;
  color: inherit;
  box-shadow: none;
  background-color: transparent;
  border: 0;
  cursor: pointer;
}


/* ==================================================
** Overflow scroll mixin
  Usage: `@include overflow-scroll();

  Define overflow scrolling dimensions
  arguments: $dimension | all, y(default), x
================================================== */

@mixin overflow-scroll($dimension: y) {
  overflow: hidden;
  // adds momentum scroll on supported devices
  -webkit-overflow-scrolling: touch;

  @if ($dimension == y) {
    overflow-y: auto;
  }
  @else if ($dimension == x) {
    overflow-x: auto;
  }
  @else if ($dimension == all) {
    overflow: auto;
  }
}


/* ==================================================
** Placeholder mixin
   Usage: `@include placeholder(content)`

  arguments: $content
================================================== */
 /* stylelint-disable */
@mixin placeholder {
  &::-webkit-input-placeholder {
    @content;
  }
  &:-moz-placeholder {
    @content;
  }
  &::-moz-placeholder {
    @content;
  }
  &:-ms-input-placeholder {
    @content;
  }
}
/* stylelint-enable */


/* ==================================================
** Absolute Positioning shorthand
  Usage: `@include position-full(4px);`

  Sets an element's positioning offsets all to the value provided.
  arguments: $offset | [length]
================================================== */

@mixin position-full($offset: 0) {
  top: $offset;
  right: $offset;
  bottom: $offset;
  left: $offset;
}


/* ==================================================
** Positioning shorthand
  Usage: `@include position-full(10px, auto, unset, auto);`

  Sets an element's position with margin/padding shorthand (top, right, bottom, left)
  arguments: $top, $right, $bottom, $left | [length]
================================================== */

@mixin position($top: false, $right: false, $bottom: false, $left: false) {
  top: position-print-value("top", $top);
  right: position-print-value("right", $right);
  bottom: position-print-value("bottom", $bottom);
  left: position-print-value("left", $left);
}

@function position-print-value($key, $value) {
  @if not $value {
    @error "position() mixin requires all 4 position values (top, right, bottom, left): #{$key} is missing or invalid.";
  }
  @else if $value != unset {
    @return $value;
  }
  @else {
    @return null;
  }
}

/* ==================================================
** Icon base
  Usage: `@include icon-base();`

  Sets up an element to implement the sage icon font and basic settings related
  to displaying the icon. Usually implemented on a pseudo-element.

  If an `$icon` is passed in this mixin also displays the icon as content for the
  element.

  arguments: $icon | null|[string]
================================================== */

@mixin icon-base($icon: null, $icon-size: md) {
  $size: map-get($sage-icon-sizes, $icon-size);

  display: inline-flex;
  box-sizing: content-box;
  width: $size;
  height: $size;
  text-transform: none;
  font-family: "Sage";
  font-size: $size;
  font-style: normal;
  font-weight: normal;
  line-height: $size;
  speak: never;

  /* Better Font Rendering =========== */
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;

  @if ($icon) {
    content: sage-icon($icon);
  }
}

/* ==================================================
** Live Avatar Ring
  Usage: `@include sage-avatar-ring();`

  Adds an activated ring around a save-avatar object in the provided color
  arguments: $color | [valid system color]
================================================== */

@mixin sage-feature-avatar-ring($color: primary) {
  $-avatar-ring-offset: -($sage-avatar-ring-width + 2px);
  $-avatar-right-color: sage-color($color);

  @if ($color == charcoal) {
    $-avatar-right-color: sage-color($color, 500);
  }

  &::before {
    border-color: $-avatar-right-color;

    @include position-full($-avatar-ring-offset);
  }
}

/* ==================================================
  ** Tab underline mixin
  Usage: `@include sage-tab-underline(".sage-tabs__tab--active");`

  Adds an tab-styled underline that animates in and out when active class is toggled
  arguments: $active-class | [valid class for an active state on the elememnt]
================================================== */

@mixin sage-tab-underline($active-class: ".sage-tab--active") {
  $item-underline: "::after";

  &#{$item-underline} {
    $spacing-off: 50%;

    content: "";
    position: absolute;
    right: $spacing-off;
    bottom: 0;
    left: $spacing-off;
    height: $sage-tabs-active-border-height;
    background: $sage-tabs-active-border-color;
    border-radius: $sage-tabs-active-border-radius;
    transition: right $sage-transition, left $sage-transition;
  }

  &:focus#{$item-underline} {
    left: 0;
    right: 0;
  }

  &:active,
  &#{$active-class} {
    &#{$item-underline} {
      left: 0;
      right: 0;
    }
  }
}

/* ==================================================
  ** Dashed border generator
  Usage: `@include sage-card-dashed-border(1, sage-color(sage), 3, 7, 3, 4);`

  Adds the appearance of a dashed border on an element using a url-encoded SVG shape as a background image.
  arguments:
      $thickness: [unitless number for thickness of the stroke]
      $color: [hex color to be used for the stroke color]
      $dash:[unitless number for the size of a dash]
      $gap: [unitless number for the size of a gap between dashes]
      $offset: [unitless number for the initial offset for the starting point of the dash]
      $border-radius: [unitless number for the border radius of the shape]
================================================== */

@mixin sage-card-dashed-border($thickness: 1, $color: sage-color(grey, 400), $dash: 4.5, $gap: 4.5, $offset: 4.5, $border-radius: 4) {
  $stripped-color-value: str-replace("#{$color}", "#", "%23");
  background-image: url("data:image/svg+xml,%3csvg width='100%25' height='100%25' xmlns='http://www.w3.org/2000/svg'%3e%3crect width='100%25' height='100%25' fill='none' rx='#{$border-radius}' ry='#{$border-radius}' stroke='#{$stripped-color-value}' stroke-width='#{$thickness * 2}' stroke-dasharray='#{$dash}%2c#{$gap + $thickness * 4}' stroke-dashoffset='#{$offset}' stroke-linecap='square'/%3e%3c/svg%3e");
}

/* ==================================================
  ** Truncate to a single line
  Usage: `@include sage-truncate;`

  Truncates text of the given element to a single line.
================================================== */
@mixin sage-truncate() {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

@mixin clearfix() {
  &::after {
    content: "";
    display: block;
    clear: both;

    @content;
  }
}

/* ==================================================
  ** Grid Row
  Usage: `@include sage-grid-row;`

  Standard grid setup for a single row layout.
================================================== */
@mixin sage-grid-row() {
  display: grid;
  grid-gap: sage-spacing();
  grid-auto-columns: auto;
  grid-auto-flow: column;
  align-items: center;
  justify-content: space-between;
}

/* ==================================================
  ** Panel Grid
  Usage: `@include sage-grid-panel-body;`

  Standard grid setup for the contents of a panel; sets up rows with `md` spacing between each.
================================================== */
@mixin sage-grid-panel() {
  display: grid;
  grid-gap: sage-spacing();
  grid-template-columns: 100%;
}

/* ==================================================
  ** Panel Body Grid
  Usage: `@include sage-grid-panel-body;`

  Grid setup for the body of a panel; sets up rows with `xs` spacing between each.
================================================== */
@mixin sage-grid-panel-body() {
  display: grid;
  grid-gap: sage-spacing(xs);
  grid-template-columns: 100%;
}
