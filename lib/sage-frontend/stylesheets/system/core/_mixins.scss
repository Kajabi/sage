/* ==================================================
  ** _mixins.scss

================================================== */


/* ==================================================
  ** GENERIC MIXINS
================================================== */

/* ==================================================
  ** Clearfix
  Usage: `@include clearfix()`

  Adds a clearfix psuedo-element for use in containers that may include floated elements
================================================== */

@mixin clearfix() {
  &::after {
    content: "";
    display: block;
    clear: both;

    @content;
  }
}

/* ==================================================
** Overflow scroll mixin
  Usage: `@include overflow-scroll();

  Define overflow scrolling dimensions
  arguments: $dimension | all, y(default), x
================================================== */

@mixin overflow-scroll($dimension: y) {
  overflow: hidden;
  // adds momentum scroll on supported devices
  -webkit-overflow-scrolling: touch;

  @if ($dimension == y) {
    overflow-y: auto;
  }
  @else if ($dimension == x) {
    overflow-x: auto;
  }
  @else if ($dimension == all) {
    overflow: auto;
  }
}

/* ==================================================
** Placeholder mixin
   Usage: `@include placeholder(content)`

  arguments: $content
================================================== */
 /* stylelint-disable */
@mixin placeholder {
  &::-webkit-input-placeholder {
    @content;
  }
  &:-moz-placeholder {
    @content;
  }
  &::-moz-placeholder {
    @content;
  }
  &:-ms-input-placeholder {
    @content;
  }
}
/* stylelint-enable */

/* ==================================================
** Absolute Positioning shorthand
  Usage: `@include position-full(4px);`

  Sets an element's positioning offsets all to the value provided.
  arguments: $offset | [length]
================================================== */

@mixin position-full($offset: 0) {
  top: $offset;
  right: $offset;
  bottom: $offset;
  left: $offset;
}

/* ==================================================
** Positioning shorthand
  Usage: `@include position-full(10px, auto, unset, auto);`

  Sets an element's position with margin/padding shorthand (top, right, bottom, left)
  arguments: $top, $right, $bottom, $left | [length]
================================================== */

@mixin position($top: false, $right: false, $bottom: false, $left: false) {
  top: position-print-value("top", $top);
  right: position-print-value("right", $right);
  bottom: position-print-value("bottom", $bottom);
  left: position-print-value("left", $left);
}

/* ==================================================
  ** Truncate to a single line
  Usage: `@include truncate;`

  Truncates text of the given element to a single line.
================================================== */
@mixin truncate() {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

/* ==================================================
  ** Visually Hidden mixin
  Usage: `@include visually-hidden()`

  Hides content from view, but allows text to stay visible to screen readers
  arguments: n/a
================================================== */

@mixin visually-hidden {
  position: absolute;
  overflow: hidden;
  clip: rect(0 0 0 0);
  clip-path: polygon(0 0, 0 0, 0 0);
  width: 1px;
  height: 1px;
  margin: -1px;
  padding: 0;
  white-space: nowrap;
  border: 0;
}


/* ==================================================
  ** SAGE-SPECIFIC MIXINS
================================================== */

/* ==================================================
** Button reset mixin
  Usage: `@include sage-button-style-reset();

  Resets base button style
  arguments: n/a
================================================== */

@mixin sage-button-style-reset {
  padding: 0;
  appearance: none;
  font-family: inherit;
  color: inherit;
  box-shadow: none;
  background-color: transparent;
  border: 0;
  cursor: pointer;
}

/* ==================================================
** Button disabled mixin
  Usage: `@include sage-button-style-disabled();

  Sets up disabled styles for buttons
  arguments: n/a
================================================== */

@mixin sage-button-style-disabled {
  box-shadow: none;
  transition: none;
  cursor: not-allowed;
  pointer-events: none;

  &:hover:not(:focus):not(:active):not(:disabled):not([aria-disabled="true"]),
  &:focus,
  &:active {
    outline: none;
  }
}

/* ==================================================
** Button button icon generator mixin
  Usage: `@include sage-button-icon-generator();

  Generates icon variations for buttons
  arguments: $icon-name, $icon-doe, $direction <left|right|only>
================================================== */

@mixin button-icon-generator($icon-name, $icon-code, $direction) {
  // --- Right Icon Buttons
  @if $direction == right {
    .sage-btn--icon-right-#{$icon-name} {
      flex-direction: row-reverse;

      &::before {
        @include sage-icon-base($icon-name, md);

        align-self: center;
        margin: 0 0 0 sage-spacing(xs);
      }
    }
  }

  // --- Left Icon Buttons
  @else if $direction == left {
    .sage-btn--icon-left-#{$icon-name} {
      flex-direction: row;

      &::before {
        @include sage-icon-base($icon-name);

        align-self: center;
        margin: 0 sage-spacing(xs) 0 0;
      }
    }
  }

  // --- Standalone Icon Buttons
  @else if $direction == only {
    .sage-btn--icon-only-#{$icon-name} {
      justify-content: center;
      text-align: center;

      &::before {
        @include sage-icon-base($icon-name);
        align-self: center;
        justify-content: center;
      }
    }
  }
}

/* ==================================================
** Button Outline
  Usage:
    Set up the custom outline:
    @include sage-focus-outline--define($color)

    Overwrite the custom outline color:
    @include sage-focus-outline--define($color)

  Sets a Sage-style custom focus outline to an interactive element.

  arguments:
    $color: [hex color to be used for the stroke color]
================================================== */

@mixin sage-focus-outline($outline-width: 2px, $outline-offset-block: 4px, $outline-offset-inline: 4px) {
  position: relative;

  &:focus,
  &:focus-within {
    outline: none;
  }

  &::after {
    $-offset-block: $outline-width * 2 + $outline-offset-block * 2;
    $-offset-inline: $outline-width * 2 + $outline-offset-inline * 2;

    content: "";
    position: absolute;
    left: 50%;
    top: 50%;
    transform: translate3d(-50%, -50%, 0) scale(0.94);
    width: calc(100% + #{$-offset-inline});
    height: calc(100% + #{$-offset-block});
    border: $outline-width solid transparent;
    border-radius: sage-border(radius-large);
    transition: opacity 0.15s ease-out 0.05s, transform 0.2s ease-in-out;
    pointer-events: none;
    opacity: 0;
  }

  &:focus:not(:disabled):not([aria-disabled="true"]),
  &:focus-within:not(:disabled):not([aria-disabled="true"]),
  &:active:not(:disabled):not([aria-disabled="true"]) {
    &::after {
      transform: translate3d(-50%, -50%, 0) scale(1);
      opacity: 1;
    }
  }
}

@mixin sage-focus-outline--update-color($outline-color) {
  &::after {
    border-color: $outline-color;
  }
}

/* ==================================================
  ** Card
  Usage: `@include sage-card;`

  Adds the basic default card setup
================================================== */

@mixin sage-card() {
  @include sage-grid-card();

  padding: $sage-card-padding;
  border: $sage-card-border;
  border-radius: $sage-card-border-radius;
}

/* ==================================================
  ** Dashed border generator
  Usage: `@include sage-dashed-border(1, sage-color(sage), 3, 7, 3, 4);`

  Adds the appearance of a dashed border on an element using a url-encoded SVG shape as a background image.
  arguments:
      $thickness: [unitless number for thickness of the stroke]
      $color: [hex color to be used for the stroke color]
      $dash:[unitless number for the size of a dash]
      $gap: [unitless number for the size of a gap between dashes]
      $offset: [unitless number for the initial offset for the starting point of the dash]
      $border-radius: [unitless number for the border radius of the shape]
================================================== */

@mixin sage-dashed-border($thickness: 1, $color: sage-color(grey, 400), $dash: 4.5, $gap: 4.5, $offset: 4.5, $border-radius: 4) {
  $stripped-color-value: str-replace("#{$color}", "#", "%23");
  background-image: url("data:image/svg+xml,%3csvg width='100%25' height='100%25' xmlns='http://www.w3.org/2000/svg'%3e%3crect width='100%25' height='100%25' fill='none' rx='#{$border-radius}' ry='#{$border-radius}' stroke='#{$stripped-color-value}' stroke-width='#{$thickness * 2}' stroke-dasharray='#{$dash}%2c#{$gap + $thickness * 4}' stroke-dashoffset='#{$offset}' stroke-linecap='square'/%3e%3c/svg%3e");
}

/* ==================================================
  ** Grid: Card
  Usage: `@include sage-grid-panel-body;`
================================================== */
@mixin sage-grid-card() {
  display: grid;
  gap: sage-spacing(sm);
  grid-template-rows: min-content;
}

/* ==================================================
  ** Grid: Panel Stack
  Usage: `@include sage-grid-stack;`
================================================== */
@mixin sage-grid-stack() {
  display: grid;
  gap: sage-spacing(xs);
  grid-template-columns: 100%;
  grid-template-rows: min-content;
  justify-items: start;
}

/* ==================================================
  ** Grid: Panel
  Usage: `@include sage-grid-panel;`
================================================== */
@mixin sage-grid-panel() {
  display: grid;
  gap: $sage-panel-grid-gap;
  grid-template-columns: 100%;
  grid-template-rows: min-content;
}

/* ==================================================
  ** Grid: Card Row
  Usage: `@include sage-grid-row;`

  Standard grid setup for a single row layout.
================================================== */
@mixin sage-grid-card-row() {
  justify-content: space-between;
  align-items: center;

  @media (max-width: sage-breakpoint(sm-max)) {
    display: flex;
    flex-flow: row wrap;
    gap: sage-spacing(sm);
  }

  @media (min-width: sage-breakpoint(md-min)) {
    display: grid;
    grid-auto-columns: auto;
    grid-auto-flow: column;
    gap: sage-spacing(sm);
  }
}

/* ==================================================
  ** Grid: Panel Row
  Usage: `@include sage-grid-row;`

  Standard grid setup for a single row layout.
================================================== */
@mixin sage-grid-panel-row() {
  justify-content: space-between;
  align-items: center;

  @media (max-width: sage-breakpoint(sm-max)) {
    display: flex;
    flex-flow: row wrap;
    gap: sage-spacing();
  }

  @media (min-width: sage-breakpoint(md-min)) {
    display: grid;
    grid-auto-columns: auto;
    grid-auto-flow: column;
    gap: sage-spacing();
  }
}

/* ==================================================
** Icon base
  Usage: `@include sage-icon-base();`

  Sets up an element to implement the sage icon font and basic settings related
  to displaying the icon. Usually implemented on a pseudo-element.

  If an `$icon` is passed in this mixin also displays the icon as content for the
  element.

  arguments: $icon | null|[string]
================================================== */

@mixin sage-icon-base($icon: null, $icon-size: md) {
  $size: map-get($sage-icon-sizes, $icon-size);

  display: inline-flex;
  box-sizing: content-box;
  width: $size;
  height: $size;
  text-transform: none;
  font-family: "Sage";
  font-size: $size;
  font-style: normal;
  font-weight: normal;
  line-height: $size;
  speak: never;

  /* Better Font Rendering =========== */
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;

  @if ($icon) {
    content: sage-icon($icon);
  }
}

/* ==================================================
  ** Panel
  Usage: `@include sage-panel;`

  Adds the basic default panel setup
================================================== */

@mixin sage-panel() {
  @include sage-grid-panel();

  padding: $sage-panel-padding;
  border-radius: $sage-panel-border-radius;
  box-shadow: $sage-panel-box-shadow;
}

/* ==================================================
  ** Tab underline
  Usage: `@include sage-tab-underline(".sage-tabs__tab--active");`

  Adds an tab-styled underline that animates in and out when active class is toggled
  arguments: $active-class | [valid class for an active state on the elememnt]
================================================== */

@mixin sage-tab-underline($active-class: ".sage-tab--active") {
  $item-underline: "::after";

  &#{$item-underline} {
    $spacing-off: 50%;

    content: "";
    position: absolute;
    right: $spacing-off;
    bottom: 0;
    left: $spacing-off;
    height: $sage-tabs-active-border-height;
    background: $sage-tabs-active-border-color;
    border-radius: $sage-tabs-active-border-radius;
    transition: right $sage-transition, left $sage-transition;
  }

  &:focus#{$item-underline} {
    left: 0;
    right: 0;
  }

  &:active,
  &#{$active-class} {
    &#{$item-underline} {
      left: 0;
      right: 0;
    }
  }
}
