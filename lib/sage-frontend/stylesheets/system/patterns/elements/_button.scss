/* ==================================================
  ** _button.scss
  type: element


================================================== */

/* stylelint-disable max-nesting-depth */

// Base styles
$-btn-transition: $sage-transition;
$-btn-border-radius: sage-border(radius);
$-btn-shadow-base: sage-shadow(sm);
$-btn-base-styles: (
  primary: (
    default: (
      color: sage-color(white),
      background-color: sage-color(primary),
      ring-color: sage-color(primary),
    ),
    hover: (
      color: sage-color(white),
      background-color: sage-color(primary, 400),
    ),
    focus: (
      color: sage-color(white),
      background-color: sage-color(primary),
    ),
    disabled: (
      color: sage-color(primary, 200),
      background-color: sage-color(primary, 100),
    )
  ),
  secondary: (
    default: (
      color: sage-color(charcoal),
      background-color: sage-color(white),
      ring-color: sage-color(charcoal),
    ),
    hover: (
      color: sage-color(charcoal),
      background-color: sage-color(grey, 200),
    ),
    focus: (
      color: sage-color(charcoal),
      background-color: sage-color(white),
    ),
    disabled: (
      color: sage-color(grey, 500),
      background-color: sage-color(grey, 200),
    )
  ),
  danger: (
    default: (
      color: sage-color(white),
      background-color: sage-color(red),
      ring-color: sage-color(red),
    ),
    hover: (
      color: sage-color(white),
      background-color: sage-color(red, 400),
    ),
    focus: (
      color: sage-color(white),
      background-color: sage-color(red),
    ),
    disabled: (
      color: sage-color(red, 200),
      background-color: sage-color(red, 100),
    )
  ),
);

$-btn-subtle-styles: (
  primary: (
    default: sage-color(primary),
    hover: sage-color(primary, 400),
    focus: sage-color(primary),
    disabled: sage-color(primary, 200),
  ),
  secondary: (
    default: sage-color(charcoal, 200),
    hover: sage-color(charcoal, 400),
    focus: sage-color(charcoal, 200),
    disabled: sage-color(grey, 500),
  ),
  danger: (
    default: sage-color(red),
    hover: sage-color(red, 400),
    focus: sage-color(red),
    disabled: sage-color(red, 200),
  ),
);

.sage-btn {
  @extend %t-sage-body-med;
  @include sage-button-style-reset();
  @include sage-focus-outline;

  $-padding-block: rem(6px);

  display: inline-flex;
  align-self: inherit;
  align-items: center;
  position: relative;
  min-height: ($-padding-block * 2 + sage-line-height(md));
  padding: $-padding-block sage-spacing(sm);
  border: 0;
  border-radius: $-btn-border-radius;
  transition: $-btn-transition;
  transition-property: border, background-color, box-shadow;

  &:disabled,
  &[aria-disabled="true"] {
    @include sage-button-style-disabled;
  }

  &:focus:not(:disabled):not([aria-disabled="true"]),
  &:active:not(:disabled):not([aria-disabled="true"]) {

    .sage-dropdown__item > & {
      @include sage-focus-outline--update-color(transparent);
    }
  }

  // Contextual modifications
  .sage-dropdown__item > & {
    width: 100%;
    padding-top: rem(9px);
    padding-bottom: rem(9px);
    border-radius: 0;
  }

  .sage-input-group & {
    border-top-left-radius: 0;
    border-bottom-left-radius: 0;
  }

  .sage-label & {
    &:first-child:not(:last-child) {
      margin-right: sage-spacing(xs);
    }

    &:last-child:not(:first-child) {
      margin-left: sage-spacing(xs);
    }

    + & {
      margin-left: 0;
    }
  }

  .sage-page-heading__actions & {
    &:not(:last-child) {
      margin-right: sage-spacing();
    }
  }

  .sage-page-heading__toolbar & {
    &:not(:last-child) {
      margin-right: sage-spacing(lg);
    }
  }

  .sage-sortable__item & {
    &:not(:last-child) {
      margin-right: sage-spacing(sm);
    }
  }

  // NOTE: Hope to use `gap` in the future instead
  // but Safari does not currently support it for flexbox
  @each $-key, $-value in $sage-spacings {
    @if ($-key == xs) {
      .sage-btn-group &:not(:last-child) {
        margin-right: sage-spacing($-key);
      }
    }
    @else if ($-key == sm or $-key == md or $-key == lg) {
      .sage-btn-group--gap-#{$-key} &:not(:last-child) {
        margin-right: sage-spacing($-key);
      }
    }
  }

  // NOTE: Icon generation consolidated in `core/_icons.scss`
}

// Generate button style variations
@each $-style-name, $-styles in $-btn-base-styles {
  .sage-btn--#{$-style-name} {
    @each $-style-type-name, $-style-type-configs in $-styles {
      @if ($-style-type-name == hover) {
        &:hover {
          color: map-get($-style-type-configs, color);
          background-color: map-get($-style-type-configs, background-color);
        }
      }
      @else if ($-style-type-name == focus) {
        &:focus,
        &:active {
          color: map-get($-style-type-configs, color);
          background-color: map-get($-style-type-configs, background-color);
        }
      }
      @else if ($-style-type-name == disabled) {
        &:disabled,
        &[aria-disabled="true"] {
          color: map-get($-style-type-configs, color);
          background-color: map-get($-style-type-configs, background-color);
          box-shadow: none;
        }
      }
      @else {
        @include sage-focus-outline--update-color(map-get($-style-type-configs, ring-color));

        color: map-get($-style-type-configs, color);
        background-color: map-get($-style-type-configs, background-color);
      }
    }

    &:not(.sage-btn--subtle) {
      // Shadow appears on Primary by default but can be toggled off with `--no-shadow`
      @if ($-style-name == primary) {
        box-shadow: $-btn-shadow-base;
        
        &.sage-btn--no-shadow {
          box-shadow: none;
        }
      }
      // All other buttons have no shadow by default but one can be toggled on with `--raised`
      @else {
        &.sage-btn--raised {
          box-shadow: $-btn-shadow-base;
        }
      }
    }
  }
}

// Subtle buttons are smaller with no padding or background color but still use a focus ring
.sage-btn--subtle {
  min-height: sage-line-height(md);
  padding: 0;
  box-shadow: none;

  @include sage-focus-outline($outline-offset-inline: 6px, $outline-offset-block: 0);

  // Generate button style variations
  @each $-style-name, $-styles in $-btn-subtle-styles {
    &.sage-btn--#{$-style-name} {
      color: map-get($-styles, default);
      background-color: transparent;

      @include sage-focus-outline--update-color(map-get($-styles, default));

      &:hover {
        color: map-get($-styles, hover);
        background-color: transparent;
      }
    
      &:focus,
      &:active {
        color: map-get($-styles, focus);
        background-color: transparent;
      }
    
      &:disabled,
      &[aria-disabled="true"] {
        color: map-get($-styles, disabled);
        background-color: transparent;
      }
    }
  }

  .sage-assistant & {
    color: sage-color(grey, 100);

    @include sage-focus-outline--update-color(sage-color(white));

    &:hover {
      color: sage-color(white);
    }

    &:focus {
      color: sage-color(white);
    }
  }
}

.sage-btn--small {
  @extend %t-sage-body-small;
}


// TODO: Investigate deprecating the float setting here
.sage-btn--align-end {
  align-self: flex-end;
  float: right;
}

.sage-btn--full-width {
  align-self: stretch;
  width: 100%;
}

.sage-btn__truncate-text {
  @include truncate;
}


// Button groups allow for several buttons together to be spaced appropriately
.sage-btn-group {
  display: flex;
  flex-flow: row wrap;
  align-items: center;
}

.sage-btn-group--align-end {
  justify-content: flex-end;
}

/* stylelint-enable max-nesting-depth */
