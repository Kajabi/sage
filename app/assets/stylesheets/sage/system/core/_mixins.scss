/* ==================================================
  ** _mixins.scss

================================================== */

/* ==================================================
  ** Visually Hidden mixin
  Usage: `@include visually-hidden()`

  Hides content from view, but allows text to stay visible to screen readers
  arguments: n/a
================================================== */

@mixin visually-hidden {
  position: absolute;
  overflow: hidden;
  clip: rect(0 0 0 0);
  clip-path: polygon(0 0, 0 0, 0 0);
  width: 1px;
  height: 1px;
  margin: -1px;
  padding: 0;
  white-space: nowrap;
  border: 0;
}


/* ==================================================
** Button reset mixin
  Usage: `@include button-style-reset();

  Resets base button style
  arguments: n/a
================================================== */

@mixin button-style-reset {
  display: inline-block;
  padding: 0;
  appearance: none;
  font-family: inherit;
  font-size: inherit;
  line-height: 1;
  color: inherit;
  box-shadow: none;
  background-color: transparent;
  border: 0;
  cursor: pointer;
}


/* ==================================================
** Overflow scroll mixin
  Usage: `@include overflow-scroll();

  Define overflow scrolling dimensions
  arguments: $dimension | all, y(default), x
================================================== */

@mixin overflow-scroll($dimension: y) {
  overflow: hidden;
  // adds momentum scroll on supported devices
  -webkit-overflow-scrolling: touch;

  @if ($dimension == y) {
    overflow-y: auto;
  }
  @else if ($dimension == x) {
    overflow-x: auto;
  }
  @else if ($dimension == all) {
    overflow: auto;
  }
}


/* ==================================================
** Placeholder mixin
   Usage: `@include placeholder(content)`

  arguments: $content
================================================== */
@mixin placeholder { /* stylelint-disable */
  &::-webkit-input-placeholder {
    @content;
  }
  &:-moz-placeholder {
    @content;
  }
  &::-moz-placeholder {
    @content;
  }
  &:-ms-input-placeholder {
    @content;
  }
} /* stylelint-enable */


/* ==================================================
** Absolute Positioning shorthand
  Usage: `@include position-full(4px);`

  Sets an element's positioning offsets all to the value provided.
  arguments: $offset | [length]
================================================== */

@mixin position-full($offset: 0) {
  top: $offset;
  right: $offset;
  bottom: $offset;
  left: $offset;
}


/* ==================================================
** Positioning shorthand
  Usage: `@include position-full(10px, auto, unset, auto);`

  Sets an element's position with margin/padding shorthand (top, right, bottom, left)
  arguments: $top, $right, $bottom, $left | [length]
================================================== */

@mixin position($top: false, $right: false, $bottom: false, $left: false) {
  top: _position-print-value("top", $top);
  right: _position-print-value("right", $right);
  bottom: _position-print-value("bottom", $bottom);
  left: _position-print-value("left", $left);
}

@function _position-print-value($key, $value) {
  @if not $value {
    @error "position() mixin requires all 4 position values (top, right, bottom, left): #{$key} is missing or invalid.";
  } @else if $value != unset {
    @return $value;
  } @else {
    @return false;
  }
}

/* ==================================================
** Icon base
  Usage: `@include icon-base();`

  Sets up an element to implement the sage icon font and basic settings related
  to displaying the icon. Usually implemented on a pseudo-element.

  If an `$icon` is passed in this mixin also displays the icon as content for the
  element.

  arguments: $icon | null|[string]
================================================== */

@mixin icon-base($icon: null) {
  display: inline-flex;
  text-transform: none;
  font: normal normal normal 1rem/1 "Sage";
  speak: none;

  @if ($icon) {
    content: sage-icon($icon);
  }
}

/* ==================================================
** Live Avatar Ring
  Usage: `@include sage-live-avatar-ring();`

  Adds an activated ring around a save-live-avatar object in the provided color
  arguments: $color | [valid system color]
================================================== */

@mixin sage-feature-live-avatar-ring($color: primary) {
  $-live-avatar-ring-offset: -($sage-live-avatar-ring-width + 2px);
  $-live-avatar-right-color: sage-color($color);

  @if ($color == charcoal) {
    $-live-avatar-right-color: sage-color($color, 500);
  }

  &::before {
    border-color: $-live-avatar-right-color;

    @include position-full($-live-avatar-ring-offset);
  }
}
