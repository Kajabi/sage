/* ==================================================
  ** sage grid
  type: style


================================================== */

// ============================================
// Variables
// ============================================

$sage-grid-columns: 12 !default;

$sage-grid-gap-sm: sage-spacing(sm) !default;
$sage-grid-gap-md: sage-spacing(sm) !default;
$sage-grid-gap-lg: sage-spacing(sm) !default;

// ============================================
// Rows
// ============================================

.sage-row {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  margin-left: calc(#{$sage-grid-gap-md} / -2);
  margin-right: calc(#{$sage-grid-gap-md} / -2);
}

// ============================================
// Columns
// ============================================

%sage-col {
  flex: 1 1 auto;
  max-width: 100%;
  padding: 0 calc(#{$sage-grid-gap-md} / 2);
}

.sage-col {
  // TODO: refactor this to replace extend
  @extend %sage-col;

  @for $sage-i from 1 through $sage-grid-columns {
    &--sm-#{$sage-i},
    &--md-#{$sage-i},
    &--lg-#{$sage-i} {
      // TODO: refactor this to replace extend
      @extend %sage-col;
      flex: 0 0 100%;
    }
  }
}

@media (min-width: sage-breakpoint(sm-min)) {
  .sage-col {
    @for $sage-i from 1 through $sage-grid-columns {
      &--sm-#{$sage-i} {
        flex: 0 1 auto;
        width: percentage($sage-i / $sage-grid-columns);
      }
    }
  }
}

@media (min-width: sage-breakpoint(md-min)) {
  .sage-col {
    @for $sage-i from 1 through $sage-grid-columns {
      &--md-#{$sage-i} {
        flex: 0 1 auto;
        width: percentage($sage-i / $sage-grid-columns);
      }
    }
  }
}

@media (min-width: sage-breakpoint(lg-min)) {
  .sage-col {
    @for $sage-i from 1 through $sage-grid-columns {
      &--lg-#{$sage-i} {
        flex: 0 1 auto;
        width: percentage($sage-i / $sage-grid-columns);
      }
    }
  }
}
