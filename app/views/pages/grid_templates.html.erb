<%
grid_patterns = [
  {
    group_name: "Equal sized columns",
    group_id: "patterns-equal",
    members: {
      m:  "--",
      o:  "---",
      mm: "----",
      mo: "-----",
    }
  },
  {
    group_name: "Dots first",
    group_id: "patterns-dots",
    members: {
      et: ".-",
      em: ".--",
      eo: ".---",
      it: "..-",
      im: "..--",
      io: "..---",
      se: "...-",
      sm: "...--",
      so: "...---"
    }
  },
  {
    group_name: "Dashes First",
    group_id: "patterns-dashes",
    members: {
      te: "-.",
      me: "--.",
      oe: "---.",
      ti: "-..",
      mi: "--..",
      oi: "---..",
      ts: "-...",
      ms: "--...",
      os: "---..."
    }
  },
  {
    group_name: "Dots on both sides",
    group_id: "patterns-both",
    members: {
      ete: ".-.",
      eme: ".--.",
      eoe: ".---.",
      eti: ".-..",
      emi: ".--..",
      eoi: ".---..",
      ets: ".-...",
      ems: ".--...",
      eos: ".---...",
      ite: "..-.",
      ime: "..--.",
      ioe: "..---.",
      iti: "..-..",
      imi: "..--..",
      ioi: "..---..",
      its: "..-...",
      ims: "..--...",
      ios: "..---...",
      ste: "...-.",
      sme: "...--.",
      soe: "...---.",
      sti: "...-..",
      smi: "...--..",
      soi: "...---..",
      sts: "...-...",
      sms: "...--...",
      sos: "...---...",
    }
  }
]

dashes = [
  %(
    <div class="sage-card__block">
      <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>
    </div>
  ),
  %(
    <div class="sage-card__block">
      <p>Proin aliquam tortor eget tortor suscipit blandit nunc sed.</p>
    </div>
  ),
  %(
    <div class="sage-card__block">
      <p>Sed a tortor magna sed consectetur, sapien eget consequat.</p>
    </div>
  ),
  %(
    <div class="sage-card__block">
      <p>Phasellus semper nisi metus, vel pulvinar risus hendrerit non.</p>
    </div>
  ),
  %(
    <div class="sage-card__block">
      <p>Integer nec ultricies nibh. Aenean sit amet faucibus massa.</p>
    </div>
  )
]

dots = [
  %(
    <i class="sage-icon-check-circle"></i>
  ),
  %(
    <span class="sage-label sage-label--draft">In progress</span>
  ),
  %(
    <i class="sage-icon-star"></i>
  ),
  %(
    <span class="sage-label sage-label--success">Verified</span>
  ),
  %(
    <span class="t-sage-body-small-semi">$5.99</span>
  ),
  %(
    <i class="sage-icon-dot-menu-horizontal"></i>
  )
]
%>

<%= content_for :heading do %>
  <h1>Grid Templates</h1>
  <p>Easily create row layouts with our library of grid templates.</p>
<% end %>
<%= content_for :quick_links do %>
  <div class="quick-links">
    <h2 class="quick-links__title">Contents</h2>
    <ul class="quick-links__body">
      <li class="quick-links__item">
        <a href="#overview" class="quick-links__link">Overview</a>
      </li>
      <li class="quick-links__item">
        <a href="#patterns" class="quick-links__link">Patterns</a>
      </li>
      <% grid_patterns.each do | group | %>
        <li class="quick-links__item">
          <a href="#<%= group[:group_id] %>" class="quick-links__link quick-links__link--secondary"><%= group[:group_name] %></a>
        </li>
      <% end %>
      <li class="quick-links__item">
        <a href="#responsive" class="quick-links__link">Responsive Considerations</a>
      </li>
      <li class="quick-links__item">
        <a href="#customization" class="quick-links__link">Limitations and Customization</a>
      </li>
    </ul>
  </div>
<% end %>
<div class="sage-type">
  <h2 id="overview">Overview</h2>
  <p>
    In order to make inline or row-based layouts simple and easy
    to build on the fly we've set up a number of template sets that
    employ CSS Grid templates.
    This means that you can add one of the grid template classes below
    onto any row-based layout element such as card rows or panel rows
    and the elements within will conform in a snap.
  </p>
  <p>The method we employ sees layouts as being composed of one of two kinds of elements:</p>
  <ul>
    <li>
      Fixed elements -- these have a small instrinsic size, and they space they occupy fits
      snugly around them. Think of icons, small text labels, and option menu triggers.
    </li>
    <li>
      Flexing elements -- these are allowed to span wider and fill space that remains after
      fixed elements's sizes are accounted for. This means they may not always naturally fill
      this space, but can flow within the bounds of this space. Think of text that may be of
      varied size but can span between other fixed elements.
    </li>
  </ul>
  <p>
    Since naming a series of abstract patterns is challenging to do in a way that is anything
    more than an enumerated list, we decided to use Morse Code as a base.
    As each letter in Morse Code is composed of a series of dots and dashes, so our layouts are
    composed of a series of fixed and flexing elements. So if fixed elements are "dots" and
    flexing elements are "dashes" we can easily analyze a layout to extract a "Morse-like" pattern.
  </p>

  <h2 id="patterns">Patterns</h2>
  <p>The patterns below use a simple combinations of just a few letters:</p>

  <table class="sage-table">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
        <th>Single</th>
        <th>Double</th>
        <th width="80">Triple</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <th>Dots</th>
        <td>Fixed elements such as icons, buttons, labels, and other controls</td>
        <td>E <code>.</code></td>
        <td>I <code>..</code></td>
        <td>S <code>...</code></td>
      </tr>
      <tr>
        <th>Dashes</th>
        <td>Flexing elements such as text blocks</td>
        <td>T <code>-</code></td>
        <td>M <code>--</code></td>
        <td>O <code>---</code></td>
      </tr>
    </tbody>
  </table>

  <p>
    While these may be useful on their own, the power comes in their combination, where letters are combined for a compound layout pattern.
    Yet, it would also not be useful or practical to have two dot letters in a row, we thus allow for dots then dashes, dashes then dots, or dots, dashes, and dots.
    A full set of the possibilities are demonstrated below.
  </p>

  <p><strong>Note:</strong> Elements shown here are merely demonstrations; any fixed or flexible units may be substituted.</p> 
  <div class="sage-panel-set">
    <% grid_patterns.each do | group | %>
      <div class="sage-panel sage-panel--docs-span-right">
        <h3 id="<%= group[:group_id] %>"><%= group[:group_name] %></h3>
        <ul class="sage-list">
          <% group[:members].each do | letter, code | %>
            <li>
              <h4 class="sage-panel__row sage-grid-template-it">
                <span style="width: 30px"><%= letter %></span>
                <code style="width: 90px"><%= code %></code>
                <code style="text-align: right">.sage-grid-template-<%= letter %></code>
              </h4>
              <div class="sage-card">
                <div class="sage-card__row sage-grid-template-<%= letter %> sage-spacer-top-xs sage-spacer-bottom">
                  <%
                    i_dashes = 0
                    i_dots = 0
                  %>
                  <% code.split("").each do | c | %>
                    <% if c == "-" %>
                      <%= dashes[i_dashes].html_safe %>
                      <% i_dashes += 1 %>
                    <% end %>
                    <% if c == "." %>
                      <%= dots[i_dots].html_safe %>
                      <% i_dots += 1 %>
                    <% end %>
                  <% end %>
                </div>
              </div>
            </li>
          <% end %>
        </ul>
      </div>
    <% end %>
  </div>

  <h2 id="responsive">Responsive Considerations</h2>
  <p>
    These layouts persist for tablet and desktop viewports,
    but for smartphone they will stack and flow with flexing elements filling the viewport
    and fixed elements lining up as long as space allows, wrapping otherwise.
  </p>

  <h2 id="customization">Limitations and Customization</h2>
  <p>
    A number of limitations become apparent with this system, some of which include:
  </p>
  <ul>
    <li>
      It is impossible to cover all possible layouts in a practical and digestible fashion.
      We have limited this library to up to three dots or dashes in a series, and only one set of dashes.
    </li>
    <li>
      Fixed elements sometimes do need particular sizes to be specified; our system assumes they have an intrinsic size.
    </li>
    <li>
      The responsive capability of the grid is quite hampered by a one-size-fits-all rule as we've employed here.
    </li>
    <li>
      Source order independence is another capability of the grid is completely ignored by this system.
      Accessibility may therefore also be somewhat hampered, albeit no more than it has been hampered by layout techniques that predate the CSS Grid.
    </li>
  </ul>
  <p>
    For these and other reasons, needs may arise where a custom grid template may be needed.
    In such a case consider this approach:
  </p>
  <ol>
    <li>
      Unless a completely new component is needed, aim to use as much
      of the existing Panel and Card styles that exist
      so that all that remains is a custom grid template,
      possibly with additional responsive considerations.
    <li>
      In lieu of <code>sage-panel__row</code> or <code>sage-card__row</code>
      use <code>sage-panel__custom-row</code> or <code>sage-card__custom-row</code>.
      These will set up a basic grid with the appropraite spacings applied.
      Yet, if even this provides too much constraint, use the complete open
      <code>sage-panel__block</code> or <code>sage-card__block</code> instead.
    </li>
    <li>
      In place of an existing grid template above set up a completely new one locally
      or within <code>stylesheets/system/layout/_custom-grid-templates.scss</code>
      named <code>.sage-custom-grid-template-{template-name}</code>.
      Set up the template as needed, including responsive adjustments.
    </li>
    <li>
      If you want to adjust source order and use <code>grid-area</code> mappings
      nest those mappings within the above custom template style declaration
      so as to keep all relevant setup contained in this space.
    </li>
  </ol>
  <p>An example of such a custom grid template is under development for future release.</p>
</div>
